#!/usr/bin/env python3
"""
Test Dashboard API - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API game-stats ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
"""

import requests
import json
import time

def test_dashboard_api():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö API dashboard"""
    
    print("üß™ Testing Dashboard APIs...")
    
    base_url = "http://localhost:8000"
    
    # Test 1: Dashboard Stats
    try:
        print("\nüìä Testing /api/dashboard-stats...")
        response = requests.get(f"{base_url}/api/dashboard-stats")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Dashboard Stats: {data}")
        else:
            print(f"‚ùå Dashboard Stats failed: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå Dashboard Stats error: {e}")
    
    # Test 2: Game Stats
    try:
        print("\nüéÆ Testing /api/game-stats...")
        response = requests.get(f"{base_url}/api/game-stats")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Game Stats: {json.dumps(data, indent=2)}")
        else:
            print(f"‚ùå Game Stats failed: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå Game Stats error: {e}")

def check_database_data():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database"""
    import sqlite3
    
    print("\nüìÇ Checking database data...")
    
    try:
        conn = sqlite3.connect("dev.db")
        cursor = conn.cursor()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Game1 data
        cursor.execute("SELECT COUNT(*) FROM game1")
        game1_count = cursor.fetchone()[0]
        print(f"üé∞ Game1 records: {game1_count}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Game2 data
        cursor.execute("SELECT COUNT(*) FROM game2")
        game2_count = cursor.fetchone()[0]
        print(f"üéÆ Game2 records: {game2_count}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Users
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        print(f"üë• Users: {users_count}")
        
        # ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î Game1
        if game1_count > 0:
            cursor.execute("""
                SELECT u.email, g.bet_amount, g.selected_color, g.result_color, g.won, g.played_at 
                FROM game1 g 
                JOIN users u ON g.user_id = u.id 
                ORDER BY g.played_at DESC 
                LIMIT 3
            """)
            recent_game1 = cursor.fetchall()
            print(f"\nüìä Recent Game1 plays:")
            for play in recent_game1:
                print(f"   ‚Ä¢ {play[0]} bet {play[1]} on {play[2]} (result: {play[3]}, {'won' if play[4] else 'lost'}) at {play[5]}")
        
        # ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î Game2
        if game2_count > 0:
            cursor.execute("""
                SELECT u.email, g.bet_amount, g.player_choice, g.bot_choice, g.result, g.played_at 
                FROM game2 g 
                JOIN users u ON g.user_id = u.id 
                ORDER BY g.played_at DESC 
                LIMIT 3
            """)
            recent_game2 = cursor.fetchall()
            print(f"\nüéÆ Recent Game2 plays:")
            for play in recent_game2:
                print(f"   ‚Ä¢ {play[0]} bet {play[1]} - {play[2]} vs {play[3]} = {play[4]} at {play[5]}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Database error: {e}")

def simulate_dashboard_update():
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó dashboard ‡πÅ‡∏ö‡∏ö real-time"""
    
    print("\nüîÑ Simulating real-time dashboard updates...")
    
    for i in range(3):
        print(f"\n--- Update {i+1} ---")
        check_database_data()
        time.sleep(2)

if __name__ == "__main__":
    print("üéØ Dashboard API Tester")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database ‡∏Å‡πà‡∏≠‡∏ô
    check_database_data()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API (‡∏ñ‡πâ‡∏≤ server ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà)
    print("\n" + "=" * 50)
    test_dashboard_api()
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á real-time updates
    print("\n" + "=" * 50)
    simulate_dashboard_update()
    
    print("\n‚úÖ Testing completed!")