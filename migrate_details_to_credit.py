#!/usr/bin/env python3
"""
Migration script: ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å table 'details' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á table 'credit'
"""

import os
import sys
from sqlalchemy import create_engine, text, MetaData, Table, Column, Integer, String, DateTime, Numeric, ForeignKey
from sqlalchemy.orm import sessionmaker
from decimal import Decimal
from datetime import datetime

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á backend app
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend', 'app'))

# Import models
from backend.app.models import SessionLocal, Base, User, Credit

def migrate_details_to_credit():
    """‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å details table ‡πÑ‡∏õ‡∏¢‡∏±‡∏á credit table"""
    
    db = SessionLocal()
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ table details ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        engine = db.get_bind()
        inspector = engine.dialect.get_table_names(engine.connect())
        
        if 'details' not in inspector:
            print("‚ùå Table 'details' ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return False
        
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table 'details'...")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å details table
        result = db.execute(text("SELECT * FROM details"))
        details_records = result.fetchall()
        
        if not details_records:
            print("üìù ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table 'details'")
            return True
        
        print(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(details_records)} records ‡πÉ‡∏ô table 'details'")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢
        for record in details_records:
            print(f"   - user_id: {record.user_id}, balance: {record.balance}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ credit table ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if 'credit' in inspector:
            print("‚ö†Ô∏è  Table 'credit' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô credit ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            credit_count = db.execute(text("SELECT COUNT(*) FROM credit")).scalar()
            if credit_count > 0:
                print(f"‚ö†Ô∏è  Table 'credit' ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {credit_count} records ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                response = input("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ")
                if response.lower() != 'y':
                    print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ migrate")
                    return False
                
                # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô credit table
                db.execute(text("DELETE FROM credit"))
                print("üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô table 'credit' ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á credit table ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        print("üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á table 'credit'...")
        Base.metadata.create_all(bind=engine)
        
        # ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å details ‡πÑ‡∏õ‡∏¢‡∏±‡∏á credit
        print("üì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        migrated_count = 0
        for record in details_records:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô users table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                user_exists = db.query(User).filter(User.id == record.user_id).first()
                if not user_exists:
                    print(f"‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° user_id {record.user_id} (‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô users table)")
                    continue
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Credit record ‡πÉ‡∏´‡∏°‡πà
                credit_record = Credit(
                    user_id=record.user_id,
                    balance=Decimal(str(record.balance)) if record.balance else Decimal('0.00'),
                    created_at=record.created_at if hasattr(record, 'created_at') else datetime.utcnow(),
                    updated_at=record.updated_at if hasattr(record, 'updated_at') else datetime.utcnow()
                )
                
                db.add(credit_record)
                migrated_count += 1
                print(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_id: {record.user_id}, balance: {record.balance}")
                
            except Exception as e:
                print(f"‚ùå Error ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_id {record.user_id}: {e}")
                continue
        
        # Commit ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        db.commit()
        print(f"üéâ Migration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {migrated_count}/{len(details_records)} records")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô credit table
        print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table 'credit' ‡∏´‡∏•‡∏±‡∏á migration:")
        credit_records = db.query(Credit).all()
        for credit in credit_records:
            print(f"   - user_id: {credit.user_id}, balance: {credit.balance}")
        
        # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö details table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        print(f"\nüìù Table 'details' ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ({len(details_records)} records)")
        response = input("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö table 'details' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ")
        if response.lower() == 'y':
            db.execute(text("DROP TABLE details"))
            db.commit()
            print("üóëÔ∏è  ‡∏•‡∏ö table 'details' ‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print("üìù ‡πÄ‡∏Å‡πá‡∏ö table 'details' ‡πÑ‡∏ß‡πâ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        db.rollback()
        return False
    
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Migration: details ‚Üí credit")
    print("=" * 50)
    
    success = migrate_details_to_credit()
    
    if success:
        print("\n‚úÖ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("üí° ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
    else:
        print("\n‚ùå Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")