#!/usr/bin/env python3
"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á table 'reports' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
"""

import sqlite3
import os
from datetime import datetime

def create_reports_table():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á table 'reports' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db_path = os.path.join("backend", "dev.db")
    
    if not os.path.exists(db_path):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {db_path}")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô backend server ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ table reports ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='reports'")
        reports_exists = cursor.fetchone()
        
        if reports_exists:
            print("‚úÖ Table 'reports' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á table
            cursor.execute("PRAGMA table_info(reports)")
            columns = cursor.fetchall()
            print("\nüìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á table 'reports':")
            for col in columns:
                print(f"   - {col[1]} ({col[2]}) {'NOT NULL' if col[3] else 'NULL'}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô records
            cursor.execute("SELECT COUNT(*) as count FROM reports")
            count = cursor.fetchone()[0]
            print(f"\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô reports: {count} records")
            
            if count > 0:
                cursor.execute("SELECT id, title, category, status, created_at FROM reports ORDER BY created_at DESC LIMIT 5")
                recent_reports = cursor.fetchall()
                print("\nüìù Reports ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):")
                for report in recent_reports:
                    print(f"   - [{report[0]}] {report[1][:30]}... ({report[2]}) - {report[3]}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö table 'reports'")
            print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á table 'reports'...")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á table reports
            create_table_sql = """
            CREATE TABLE reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                title VARCHAR(255) NOT NULL,
                category VARCHAR(50) NOT NULL,
                description TEXT NOT NULL,
                status VARCHAR(20) NOT NULL DEFAULT 'pending',
                created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                CHECK (category IN ('technical','payment','account','betting','suggestion','other')),
                CHECK (status IN ('pending','reviewing','resolved','closed'))
            )
            """
            
            cursor.execute(create_table_sql)
            conn.commit()
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á table 'reports' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        # ‡πÅ‡∏™‡∏î‡∏á tables ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        print("\nüóÉÔ∏è  Tables ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) as count FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"   - {table_name}: {count} records")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()

def test_report_creation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á report"""
    db_path = os.path.join("backend", "dev.db")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT id, email FROM users LIMIT 1")
        user = cursor.fetchone()
        
        if not user:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return False
        
        print(f"üë§ ‡∏û‡∏ö user: {user[1]} (ID: {user[0]})")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á test report
        test_report = {
            'user_id': user[0],
            'title': 'Test Report - System Check',
            'category': 'technical',
            'description': 'This is a test report to verify the reports system is working correctly.',
            'status': 'pending'
        }
        
        cursor.execute("""
            INSERT INTO reports (user_id, title, category, description, status)
            VALUES (?, ?, ?, ?, ?)
        """, (test_report['user_id'], test_report['title'], test_report['category'], 
              test_report['description'], test_report['status']))
        
        conn.commit()
        
        # ‡∏î‡∏∂‡∏á report ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
        report_id = cursor.lastrowid
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á test report ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ID: {report_id})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating test report: {e}")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    print("üöÄ Reports Table Setup Tool")
    print("=" * 50)
    
    success = create_reports_table()
    
    if success:
        print("\n" + "=" * 50)
        response = input("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á test report ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ")
        if response.lower() == 'y':
            test_success = test_report_creation()
            if test_success:
                print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö reports ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
            else:
                print("‚ö†Ô∏è  ‡∏£‡∏∞‡∏ö‡∏ö reports ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        else:
            print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö reports ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
    else:
        print("\n‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á table reports ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")