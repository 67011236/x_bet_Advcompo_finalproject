#!/usr/bin/env python3
"""
Simple Migration script: ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å table 'details' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á table 'credit'
‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: python check_and_migrate.py
"""

import sqlite3
import os
from decimal import Decimal
from datetime import datetime

def migrate_details_to_credit():
    """‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å details table ‡πÑ‡∏õ‡∏¢‡∏±‡∏á credit table"""
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db_path = os.path.join("backend", "dev.db")
    
    if not os.path.exists(db_path):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row  # ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö dict ‡πÑ‡∏î‡πâ
        cursor = conn.cursor()
        
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ table details ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='details'")
        details_exists = cursor.fetchone()
        
        if not details_exists:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö table 'details' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ table credit ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='credit'")
        credit_exists = cursor.fetchone()
        
        if not credit_exists:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö table 'credit' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô backend server ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á table 'credit'")
            return False
        
        print("‚úÖ ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á table 'details' ‡πÅ‡∏•‡∏∞ 'credit'")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å details table
        print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table 'details'...")
        cursor.execute("SELECT * FROM details")
        details_records = cursor.fetchall()
        
        if not details_records:
            print("üìù ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table 'details'")
            return True
        
        print(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(details_records)} records ‡πÉ‡∏ô table 'details':")
        for record in details_records:
            print(f"   - user_id: {record['user_id']}, balance: {record['balance']}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô credit table ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT COUNT(*) as count FROM credit")
        credit_count = cursor.fetchone()['count']
        
        if credit_count > 0:
            print(f"\n‚ö†Ô∏è  Table 'credit' ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {credit_count} records ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            response = input("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ")
            if response.lower() != 'y':
                print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ migrate")
                return False
            
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô credit table
            cursor.execute("DELETE FROM credit")
            print("üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô table 'credit' ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å details ‡πÑ‡∏õ‡∏¢‡∏±‡∏á credit
        print("\nüì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        migrated_count = 0
        current_time = datetime.utcnow().isoformat()
        
        for record in details_records:
            try:
                user_id = record['user_id']
                balance = record['balance'] if record['balance'] else 0.00
                created_at = record.get('created_at', current_time)
                updated_at = record.get('updated_at', current_time)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô users table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
                user_exists = cursor.fetchone()
                
                if not user_exists:
                    print(f"‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° user_id {user_id} (‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô users table)")
                    continue
                
                # Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô credit table
                cursor.execute("""
                    INSERT INTO credit (user_id, balance, created_at, updated_at)
                    VALUES (?, ?, ?, ?)
                """, (user_id, balance, created_at, updated_at))
                
                migrated_count += 1
                print(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_id: {user_id}, balance: {balance}")
                
            except Exception as e:
                print(f"‚ùå Error ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_id {record['user_id']}: {e}")
                continue
        
        # Commit ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        conn.commit()
        print(f"\nüéâ Migration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {migrated_count}/{len(details_records)} records")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô credit table
        print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table 'credit' ‡∏´‡∏•‡∏±‡∏á migration:")
        cursor.execute("SELECT * FROM credit")
        credit_records = cursor.fetchall()
        for record in credit_records:
            print(f"   - user_id: {record['user_id']}, balance: {record['balance']}")
        
        # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö details table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        print(f"\nüìù Table 'details' ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ({len(details_records)} records)")
        response = input("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö table 'details' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ")
        if response.lower() == 'y':
            cursor.execute("DROP TABLE details")
            conn.commit()
            print("üóëÔ∏è  ‡∏•‡∏ö table 'details' ‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print("üìù ‡πÄ‡∏Å‡πá‡∏ö table 'details' ‡πÑ‡∏ß‡πâ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()

def check_database_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    db_path = os.path.join("backend", "dev.db")
    
    if not os.path.exists(db_path):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {db_path}")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) as count FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"   - {table_name}: {count} records")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å details ‡πÅ‡∏•‡∏∞ credit
            if table_name in ['details', 'credit']:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                sample_records = cursor.fetchall()
                if sample_records:
                    print(f"     ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
                    for record in sample_records:
                        print(f"       {record}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

if __name__ == "__main__":
    print("üöÄ Migration Tool: details ‚Üí credit")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
    print("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
    check_database_status()
    
    print("\n" + "=" * 50)
    response = input("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° migration ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ")
    
    if response.lower() == 'y':
        success = migrate_details_to_credit()
        
        if success:
            print("\n‚úÖ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            print("üí° ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
        else:
            print("\n‚ùå Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    else:
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å migration")